geometry
{
  import_mesh false ; Use built-in mesh generator
  dim 2 ; dimension of the domain
  length 2e-2 ; [m]
  height 1e-2 ; [m] In 3D, the third parameters is width
  length_divisions 20 ; Number of cell layers in the length direction
  height_divisions 10 ; Number of cell layers in the height direction
}

refinement
{
  n_heat_refinements 0 ; Number of coarsening/refinement executed (uses Kelly's
                       ; error estimator)
  n_beam_refinements 2 ; Number of time the cells on the paths of the beams are
                       ; refined
  max_level          2 ; Maximum number of time a cell can be refined
}

materials
{
  n_materials 1

  property_format polynomial ;  Value can be polynomial or table

  initial_temperature 300 ; Optional parameter. Default value is 300.
  
  material_0
  {
    solid 
    {
      density 7541 ; [kg/m^3] For now all the states needs to have the same
                    ; density. 
      specific_heat 600 ; [J/kg K] 
      thermal_conductivity 26.6 ; [W/m K]
                                
    }
    
    powder
    {
      specific_heat 600 ; [J/kg K] 
      density 7541 ; [kg/m^3]
      thermal_conductivity 0.266 ; [W/m K]
    }
    
    liquid
    {
      specific_heat 775 ; [J/kg K] 
      density 7541 ; [kg/m^3]
      thermal_conductivity 29.0 ; [W/m k] Not all three states need to define
                                ; the same properties or to exist
    }

    solidus 1528 ; [K]
    liquidus 1610 ; [K]
    latent_heat 227000 ; [J/kg]
  }
}

sources
{
  n_sources 1

  n_beams 1

  beam_0
  {
    depth 1e-3 ; [m] maximum depth reached by the laser
    energy_conversion_efficiency 0.5 ; number between 0 and 1
    control_efficiency 0.6 ; number between 0 and 1
    diameter 1e-3 ; [m]
    current 0.02 ; [A]
    voltage 60000 ; [V]
    abscissa "if(t<5e-10, 4e7*t, 0.02-4e7*(t-(5e-10)))" ; if(condition, value_if_true,
                                                        ; value_it_else)
  }
}

time_stepping
{
  method backward_euler ; Possibilities: backward_euler, implicit_midpoint,
                        ; crank_nicolson, sdirk2, forward_euler, rk_third_order,
                        ; rk_fourth_order, bogacki_shampine, dopri,
                        ; fehlberg, cash_karp
  duration 1e-9 ; [s]
  time_step 5e-11 ; [s]
}

post_processor
{
  file_name output
}

discretization
{
  fe_degree 3
  quadrature gauss ; Optional parameter. Possibilities: gauss or lobatto
}

boundary_conditions
{
  radiative_loss true ; Optional parameter. Possibities: true [default] or false
}

profiling
{
  timer false ; Optional property tree. 
}

memory_space device ; If compiled with CUDA support, run on the device
